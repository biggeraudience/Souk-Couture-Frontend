// src/styles/pages/_landing-page.scss
@import '../config/variables';
@import '../config/mixins';

// Define your navbar and footer heights here if they are fixed,
// or get them from your variables if defined elsewhere.
// These are still good to define if other components rely on them for spacing.
// --- UPDATED VALUES BASED ON YOUR MEASUREMENTS ---
$navbar-height-default: 12rem;
$navbar-height-lg: 10rem;
$navbar-height-md: 5.725rem;
$navbar-height-sm: 7.5rem;

// --- New responsive footer height variables ---
// IMPORTANT: THESE MUST MATCH THE 'height' PROPERTIES IN YOUR _footer.scss FILE
$footer-height-default: 10rem; // Assumes default/lg footer height is 10rem
$footer-height-md: 6rem;       // Match the height in _footer.scss for md
$footer-height-sm: 8rem;       // <--- FIX: This must be 8rem to match _footer.scss

.landing-page {
  width: 100vw;
  display: grid;
  grid-template-rows: 1fr;
  grid-template-columns: 1fr;
}

.gender-section {
  width: 100%;
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: auto;
  gap: 0;

  // IMPORTANT: The calc functions will now use the new responsive footer heights.
  // We'll use the specific footer height variable for each breakpoint.
  min-height: calc(100vh - (#{$navbar-height-default} + #{$footer-height-default}));

  @include respond(lg) {
    min-height: calc(100vh - (#{$navbar-height-lg} + #{$footer-height-default}));
  }

  @include respond(md) {
    min-height: calc(100vh - (#{$navbar-height-md} + #{$footer-height-md}));
  }

  @include respond(sm) {
    min-height: calc(100vh - (#{$navbar-height-sm} + #{$footer-height-sm}));
  }

  .gender-box {
    position: relative;
    overflow: hidden;
    border: 0.1rem solid $color-border-default;

    width: 100%;
    min-height: 35rem; // Default min-height for gender boxes

    display: flex;
    justify-content: center;
    align-items: center;

    &:first-child {
      border-right: 0.1rem solid $color-border-default;
    }

    @include respond(sm) {
      min-height: 40rem; // Keeps gender boxes tall on small screens in a grid
    }

    .gender-img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .gender-content {
      position: absolute;
      bottom: $spacing-m;
      left: 50%;
      transform: translateX(-50%);
      z-index: $z-index-medium;
      background-color: rgba($color-black, 0.6);
      border: 0.1rem solid $color-border-default;
      padding: $spacing-s;
      color: $color-text-light;
      text-align: center;
      max-width: 80%;
      border-radius: $border-radius-small;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: $spacing-s;

      .gender-overlay-text {
        font-family: $font-family-body;
        font-size: $font-size-small;
        margin-bottom: 0;
      }
    }
  }
}